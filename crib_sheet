



### swarm

docker swarm init

investigate with:

docker node ( ls | inspect ...)

get the join tokens with: docker swarm join-token (manager|worker)

#rotate compromised join key with:        docker swarm join-token --rotate (manager|worker)


#to avoid a manager restart to join a swarm automatically (need to enter the unlock key first):
#or to avoid restoring an old backup to the swarm manager:

docker swarm init --autolock
or for existing ones:
docker swarm update --autolock=true

unlocked with:   docker swarm unlock  (enter the key shared previously during autolock)

increasing the cert expiry  rotation for the mutual TLS certs
docker swarm update --cert-expiry=1h       more like in days          

#########################

networking

docker network create (  -o encrypted     for encryption)
MacVLAN allows to expose the containers directly as if normal hosts and therefore allow direct comms to legacy network devices outside containers
but it needs promiscuous mode on the host NIC so wont work in public clouds
if using public clouds or non promiscuous mode capable hosts then need to use  IPVLAN

Note that on Windows:  bridge is called NAT ! (?)


create a bridge with:
docker network create -d bridge golden-gate

allocate with:
docker container run -d --network golden-gate -p 80:80 apache   (-d for daemon)


creating a swarm overlahy network rather than local bridges:
docker network create -d overlay golden-overlay

creating a service with 2 replicas across a swarm and overlay:

docker service create -d --name service1 --replicas 2 --network golden-overlay alpine sleep 1h
docker service ls
docker service ps service1     (this tells us which node they run on)


