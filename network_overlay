
bridge0 (br0) on all hosts are connecting to a local VTEP (VxLAN Tunnel End Point) and a mesh is set up  uses UDP/4789 on the transport/underlay  

each container has a veth (virt eth) that connects to the local bridge

this allows to support  layer2 across a routed underlay
 
For SWARM mode, other ports required between hosts in case of f/w are 7946/tcp + 7946/udp  + 2377/tcp    


create a network overlay with:

docker network create -d overlay web_overlay_bridge_lan       (-d  is for specifying driver of overlay - default = bridge)

issued on the manager node where issued.
note that a docker network ls   does not show that network until  it is required (pruning takes place)


MACVLAN - gives it own IP + MAC   unlike for Windows:  l2bridge where they share a common MAC but requires promiscous mode
if the physical i/f is eth0  then vlans are:  eth0.vlan_id  e.g.  eth0.100   
Also need to provide the subnet range and the range of IPs that will not clash with the real world VLAN 100
Great for migration IF the env supports  promiscuous mode.  e.g.  not public clouds or locked down ESX/VMWARE
cannot ping parent interface

IPVLAN - only get their own IP not MAC  like l2bridge but it is not a bridge
dont work with DHCP given dup. mac  unless client IDs...
cannot ping parent interface

docker network create -d ipvlan --subnet=192.168.1.0/24 --gateway=192.168.1.1 \
  --ip-range=192.168.1.0/29 \ (to let docker know what IP subnet to use to allocate IPs from our main subnet e.g.192.168.1.0/24 to avoid clashes )
  -o ipvlan_mode=l2 \ (layer2 is the default so could be left out)
  -o parent=eth0 \ (this is the parent i/f)
  ipvlan_name_goes_here


dns on 127.0.0.11:53 on every host and goes out to Internet if not found.
based on host !

a vip created for life when service created
for inside traffic

to cover external req. either  Routing Mesh  or  HTTP Routing Mesh
ingress bridge overlay is used by routing mesh so that node hit where no worker dedicated to service redirecst
routing limitation:  only 1 service listening on 1 layer4 port   + no HTTP app awareness

HRM 
Docker DC required (UCP)  from Docker EE  
https? in the future
enable HRM in UCP   creates new overlap  UCP-HRM  + Global UCP-HRM service (system service)
then you createa a service  by attaching to UCP-HRM network + label (DNS hostname to associate with sevice)
2 services can be on port 80 as long as diff hostname.
UCP-HRM maps port 80 to the right service


